package rules;

import com.example.springboot.model.CarBuyingRequest
import java.util.Date
import java.util.ArrayList;
import org.apache.commons.lang3.time.DateUtils;

// Define the main query for matching
query queryMatch(CarBuyingRequest $request)
    (
        checkWorkStatusENP($request;) and
        checkAge($request;) and
        checkMonthlyIncome($request;)and
        checkStabileIncome($request;)
    ) or
    (
        checkAboveAge($request;) and
        checkMaxTimeForAbove65($request;) and
        checkMonthlyIncome($request;)and
        checkStabileIncome($request;)
    ) or
    (
        checkAge($request;) and
        checkWorkStatus($request;) and
        checkMaxTimeToPayForEmployed($request;) and
        checkMonthlyIncome($request;)and
        checkStabileIncome($request;)
    )
end

// Define the query to check the age requirement
query checkAge(CarBuyingRequest $request)
    $r : CarBuyingRequest(this == $request, age < 65)
end

// Define the query to check the monthly income requirement
query checkMonthlyIncome(CarBuyingRequest $request)
    $r : CarBuyingRequest(this == $request, (loanAmount / numberOfRate) < (0.3 * monthlyIncome))
end

// Corrected query to check the maximum time to pay for people above 65
query checkMaxTimeForAbove65(CarBuyingRequest $request)
    $r : CarBuyingRequest(this == $request, maxTimeToPay before DateUtils.addYears(new Date(), 5))
end

// Define the query to check the age requirement above 65
query checkAboveAge(CarBuyingRequest $request)
    $r : CarBuyingRequest(this == $request, age > 65)
end

// Define the query to check the work status (employed or unemployed)
query checkWorkStatusENP(CarBuyingRequest $request)
    $r : CarBuyingRequest(this == $request, status == Status.EMPLOYED || status == Status.UNEMPLOYED)
end

// Define the query to check the work status (unspecified)
query checkWorkStatus(CarBuyingRequest $request)
    $r : CarBuyingRequest(this == $request, status == Status.EMPLOYEDUNSPECIFIED)
end

// Define the query to check the maximum time to pay for employed individuals
query checkMaxTimeToPayForEmployed(CarBuyingRequest $request)
    $r : CarBuyingRequest(this == $request, workingTo after maxTimeToPay)
end

query checkStabileIncome(CarBuyingRequest $request)
    $r :CarBuyingRequest(this==$request,stableIncome==true)
end

// Define the rule that uses the queryMatch query
rule "Give system decision"
when
    $request : CarBuyingRequest(user != null, !decisionMade)
    queryMatch($request;)
then
    $request.setAiDecision(1);
    $request.setDecisionMade(true);
    update($request);
end